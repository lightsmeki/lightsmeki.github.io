<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Zoe's blog]]></title>
  <subtitle><![CDATA[宅学长的博客]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://seniorzhai.github.io/"/>
  <updated>2015-03-19T07:10:25.570Z</updated>
  <id>http://seniorzhai.github.io/</id>
  
  <author>
    <name><![CDATA[Zoe]]></name>
    <email><![CDATA[developer.zhaitao@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[500 px模糊控件]]></title>
    <link href="http://seniorzhai.github.io/2015/03/19/500-px%E6%A8%A1%E7%B3%8A%E6%8E%A7%E4%BB%B6/"/>
    <id>http://seniorzhai.github.io/2015/03/19/500-px模糊控件/</id>
    <published>2015-03-19T06:32:20.000Z</published>
    <updated>2015-03-19T06:34:47.000Z</updated>
    <content type="html"><![CDATA[<p>500px开源了一款模糊View<br><a id="more"></a><br><img src="https://github.com/500px/500px-android-blur/blob/master/blurdemo.gif" alt=""><br>使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">blurringView.setBlurredView(blurredView); <span class="comment">// 设置需要覆盖的View</span></div><div class="line">blurringView.invalidate(); <span class="comment">// 改变时调用</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<p>500px开源了一款模糊View<br>]]></summary>
    
      <category term="blur" scheme="http://seniorzhai.github.io/tags/blur/"/>
    
      <category term="模糊" scheme="http://seniorzhai.github.io/tags/%E6%A8%A1%E7%B3%8A/"/>
    
      <category term="毛玻璃" scheme="http://seniorzhai.github.io/tags/%E6%AF%9B%E7%8E%BB%E7%92%83/"/>
    
      <category term="Android" scheme="http://seniorzhai.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AndroidStudio上使用NDK]]></title>
    <link href="http://seniorzhai.github.io/2015/03/19/AndroidStudio%E4%B8%8A%E4%BD%BF%E7%94%A8NDK/"/>
    <id>http://seniorzhai.github.io/2015/03/19/AndroidStudio上使用NDK/</id>
    <published>2015-03-19T05:29:22.000Z</published>
    <updated>2015-03-19T07:09:59.000Z</updated>
    <content type="html"><![CDATA[<p><a id="more"></a></p>
<h2 id="准备工作">准备工作</h2>
<ol>
<li>下载NDK</li>
<li>配置环境变量，在<code>~/.bash_profile</code>文件下添加</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 根据自己存放的位置指定</span></div><div class="line"><span class="keyword">export</span> NDK_ROOT=/Users/UserName/Documents/Android/android-ndk-r10</div><div class="line"><span class="keyword">export</span> PATH=<span class="variable">$NDK_ROOT</span>:<span class="variable">$PATH</span></div></pre></td></tr></table></figure>

<h2 id="新建一个项目">新建一个项目</h2>
<p>创建一个<code>MathKit</code>类<br><img src="/img/15031901.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">**示例**：&lt;https:<span class="comment">//github.com/SeniorZhai/NdkDemo&gt;</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathKit</span> </span>{</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">square</span>(<span class="keyword">int</span> num);</div><div class="line"></div><div class="line">	<span class="keyword">static</span> {</div><div class="line">		System.loadLibrary(<span class="string">"JniDemo"</span>);</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>在命令行中进入目录，使用<code>javah</code>命令生成.h文件<br><img src="/img/15031902.png" alt=""><br>将.h文件存放至jni文件夹下，并新建.cpp文件<br><img src="/img/15031903.png" alt=""><br>根据头文件，编写cpp文件</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;com_zoe_ndkdemo_jni_MathKit.h&gt;</span></div><div class="line"></div><div class="line">JNIEXPORT jint JNICALL Java_com_zoe_ndkdemo_jni_MathKit_square</div><div class="line">  (JNIEnv * env, jclass cls, jint num)</div><div class="line">  {</div><div class="line">    <span class="keyword">return</span> num * num;</div><div class="line">  }</div></pre></td></tr></table></figure>

<p>在<code>local.properties</code>文件添加ndk路径</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ndk.dir=<span class="regexp">/Users/</span>UserName<span class="regexp">/Documents/</span>Android<span class="regexp">/android-ndk-r10</span></div></pre></td></tr></table></figure>

<p>在app项目中的build.gradle中的<code>defaultConfig</code>中添加</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="title">ndk</span> {</div><div class="line">	<span class="title">moduleName</span> <span class="string">"JniDemo"</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>之后就可以在代码中调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> TextView textView;</div><div class="line"></div><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span>(Bundle savedInstanceState) {</div><div class="line">   <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">   setContentView(R.layout.activity_main);</div><div class="line">   textView = (TextView) findViewById(R.id.text);</div><div class="line">   textView.setText(<span class="string">"2*2="</span>+ MathKit.square(<span class="number">2</span>));</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<p>]]></summary>
    
      <category term="ndk" scheme="http://seniorzhai.github.io/tags/ndk/"/>
    
      <category term="mac" scheme="http://seniorzhai.github.io/tags/mac/"/>
    
      <category term="AndroidStudio" scheme="http://seniorzhai.github.io/tags/AndroidStudio/"/>
    
      <category term="Android" scheme="http://seniorzhai.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[理解StrongReferce、SoftReference、WeakReference、PhantomReference]]></title>
    <link href="http://seniorzhai.github.io/2015/03/18/%E7%90%86%E8%A7%A3StrongReferce%E3%80%81SoftReference%E3%80%81WeakReference%E3%80%81PhantomReference/"/>
    <id>http://seniorzhai.github.io/2015/03/18/理解StrongReferce、SoftReference、WeakReference、PhantomReference/</id>
    <published>2015-03-18T08:22:58.000Z</published>
    <updated>2015-03-18T08:29:41.000Z</updated>
    <content type="html"><![CDATA[<p>JDK 1.2版本引入了强、软、弱、虚引用的概念<br><a id="more"></a></p>
<h1 id="StrongReference">StrongReference</h1>
<ul>
<li>修饰的对象，JVM宁愿抛出OOM也不回收对象</li>
</ul>
<h1 id="SoftReference">SoftReference</h1>
<ul>
<li>内存不足时，才会回收对象</li>
</ul>
<h1 id="WeakReference">WeakReference</h1>
<ul>
<li>无论内容是否足够，垃圾回收扫描到，他就会被回收</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Test</span>  </div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">weakReference</span>() {   </div><div class="line">     Object referent = <span class="keyword">new</span> Object();   </div><div class="line">     WeakReference&lt;Object&gt; weakRerference = <span class="keyword">new</span> WeakReference&lt;Object&gt;(referent);   </div><div class="line">  </div><div class="line">     assertSame(referent, weakRerference.get());   </div><div class="line">       </div><div class="line">     referent = <span class="keyword">null</span>;   </div><div class="line">     System.gc();   </div><div class="line">       </div><div class="line">    <span class="javadoc">/**</span></div><div class="line">      * 一旦没有指向 referent 的强引用, weak reference 在 GC 后会被自动回收</div><div class="line">      */  </div><div class="line">     assertNull(weakRerference.get());   </div><div class="line">}</div></pre></td></tr></table></figure>

<h1 id="PhantomReference">PhantomReference</h1>
<ul>
<li>相对于完全没有引用</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<p>JDK 1.2版本引入了强、软、弱、虚引用的概念<br>]]></summary>
    
      <category term="引用" scheme="http://seniorzhai.github.io/tags/%E5%BC%95%E7%94%A8/"/>
    
      <category term="Android" scheme="http://seniorzhai.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Shape的使用]]></title>
    <link href="http://seniorzhai.github.io/2015/03/17/Android-Shape%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://seniorzhai.github.io/2015/03/17/Android-Shape的使用/</id>
    <published>2015-03-17T07:20:02.000Z</published>
    <updated>2015-03-17T07:20:47.000Z</updated>
    <content type="html"><![CDATA[<p><a id="more"></a></p>
<ul>
<li>shape<br>  android:shape[“rectagle”|”oval”|”line”|”ring”]<ul>
<li>rectagle 矩形</li>
<li>oval椭圆</li>
<li>line水平直线</li>
<li>ring环形</li>
</ul>
</li>
<li>gradient 渐变<ul>
<li>android:startColor 起始颜色</li>
<li>android:endColor 结束颜色</li>
<li>android:angle 渐变角度，0从上到下，90从左到右，数值必须为45的倍数，默认为0</li>
<li>android:type 渐变样式 line线性渐变，radial环形渐变，sweep扫描渐变</li>
</ul>
</li>
<li>solid 填充颜色<ul>
<li>android:color 填充颜色</li>
</ul>
</li>
<li>stroke 描边<ul>
<li>android:width 描边的宽度</li>
<li>android:color 描边的颜色</li>
<li>android:dashWidth 间隔线的宽度</li>
<li>android:dashGap 间隔线的间隔</li>
</ul>
</li>
<li>corners  圆角<ul>
<li>android:radius 圆角的半径，值越大越圆</li>
<li>android:topRightRadius 右上角半径</li>
<li>android:bottomLeftRadius 左下角半径</li>
<li>android:topLeftRadius 右上角半径</li>
<li>android:bottomRightRadius 右下角半径</li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<p>]]></summary>
    
      <category term="shape" scheme="http://seniorzhai.github.io/tags/shape/"/>
    
      <category term="Android" scheme="http://seniorzhai.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[androidannotations(二)]]></title>
    <link href="http://seniorzhai.github.io/2015/03/16/androidannotations(%E4%BA%8C)/"/>
    <id>http://seniorzhai.github.io/2015/03/16/androidannotations(二)/</id>
    <published>2015-03-16T13:30:45.000Z</published>
    <updated>2015-03-16T13:35:15.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/excilys/androidannotations" target="_blank" rel="external">androidannotations</a>是一款Android注入框架，可以方便我们编程，减少代码量(变相减少了错误的可能)，让我们可以更多的把精力放在逻辑处理上。<br><a id="more"></a></p>
<h2 id="事件监听">事件监听</h2>
<p>点击事件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Click</span>(R.id.myButton)</div><div class="line"><span class="keyword">void</span> myClick() {</div><div class="line">  <span class="comment">// ...</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="annotation">@Click</span></div><div class="line"><span class="keyword">void</span> anotherButton() {</div><div class="line">  <span class="comment">// ...</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="annotation">@Click</span></div><div class="line"><span class="keyword">void</span> yetAnotherButton(View clickedView) {</div><div class="line">  <span class="comment">// ...</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="annotation">@Click</span>({R.id.myButton,R.id.myOtherButton}) </div><div class="line"><span class="keyword">void</span> handlesTwoButtons(){</div><div class="line">  <span class="comment">// ...</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>其他事件</p>
<ul>
<li>长按 @LongClick</li>
<li>触摸 @Touch</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<p><a href="https://github.com/excilys/androidannotations" target="_blank" rel="external">androidannotations</a>是一款Android注入框架，可以方便我们编程，减少代码量(变相减少了错误的可能)，让我们可以更多的把精力放在逻辑处理上。<br>]]></summary>
    
      <category term="注入" scheme="http://seniorzhai.github.io/tags/%E6%B3%A8%E5%85%A5/"/>
    
      <category term="Android" scheme="http://seniorzhai.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[TimingLogger]]></title>
    <link href="http://seniorzhai.github.io/2015/03/11/TimingLogger/"/>
    <id>http://seniorzhai.github.io/2015/03/11/TimingLogger/</id>
    <published>2015-03-11T12:44:31.000Z</published>
    <updated>2015-03-12T03:30:30.000Z</updated>
    <content type="html"><![CDATA[<p>妈妈再也不用担心我分析用时时间了<br><a id="more"></a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">TimingLogger timings = <span class="keyword">new</span> TimingLogger(TAG,<span class="string">"methodA"</span>);</div><div class="line"><span class="comment">// ...</span></div><div class="line">timings.addSplit(<span class="string">"work A"</span>);</div><div class="line"><span class="comment">// ...</span></div><div class="line">timings.addSplit(<span class="string">"work B"</span>);</div><div class="line">timings.dumpToLog();</div></pre></td></tr></table></figure>

<p>当调用<code>dumpToLog</code>方法时会打印Log</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">D</span>/TAG     ( <span class="number">3459</span>): methodA: begin</div><div class="line"><span class="keyword">D</span>/TAG     ( <span class="number">3459</span>): methodA:      <span class="number">9</span> ms, work A</div><div class="line"><span class="keyword">D</span>/TAG     ( <span class="number">3459</span>): methodA:      <span class="number">1</span> ms, work B</div><div class="line"><span class="keyword">D</span>/TAG     ( <span class="number">3459</span>): methodA: end, <span class="number">16</span> ms</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<p>妈妈再也不用担心我分析用时时间了<br>]]></summary>
    
      <category term="Log" scheme="http://seniorzhai.github.io/tags/Log/"/>
    
      <category term="用时" scheme="http://seniorzhai.github.io/tags/%E7%94%A8%E6%97%B6/"/>
    
      <category term="Android" scheme="http://seniorzhai.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git之Bug分支]]></title>
    <link href="http://seniorzhai.github.io/2015/03/09/Git%E4%B9%8BBug%E5%88%86%E6%94%AF/"/>
    <id>http://seniorzhai.github.io/2015/03/09/Git之Bug分支/</id>
    <published>2015-03-09T13:15:52.000Z</published>
    <updated>2015-03-09T13:24:21.000Z</updated>
    <content type="html"><![CDATA[<p>在开发中常常遇到这种情况——你正在指尖飞舞，码代码ing，这个时候QA来了个BUG。这个时候，工作区里还有很多ing的代码，没有提交，你又需要创建分支来解决BUG。<br><a id="more"></a><br>这个时候需要<code>git stash</code>命令来拯救你的代码<br>这条命令可以把当前工作现场<code>储存</code>起来，等以后恢复现场后继续工作<br>储存后，打出分支解决问题，完成后，合并分支(git merge)，再删除分支(git branch -d)<br>之后用<code>git stash list</code>查看储存起来的工作现场<br>这个时候可以使用下面两个方法恢复工作现场：</p>
<ol>
<li><code>git stash apply</code>恢复，<code>git stach drop</code>删除工作现场</li>
<li><code>git stash pop</code>恢复</li>
</ol>
]]></content>
    <summary type="html"><![CDATA[<p>在开发中常常遇到这种情况——你正在指尖飞舞，码代码ing，这个时候QA来了个BUG。这个时候，工作区里还有很多ing的代码，没有提交，你又需要创建分支来解决BUG。<br>]]></summary>
    
      <category term="Git" scheme="http://seniorzhai.github.io/tags/Git/"/>
    
      <category term="分支" scheme="http://seniorzhai.github.io/tags/%E5%88%86%E6%94%AF/"/>
    
      <category term="Prose" scheme="http://seniorzhai.github.io/categories/Prose/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MongoDB常用命令]]></title>
    <link href="http://seniorzhai.github.io/2015/03/05/MongoDB%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://seniorzhai.github.io/2015/03/05/MongoDB常用命令/</id>
    <published>2015-03-05T04:27:33.000Z</published>
    <updated>2015-03-05T05:09:46.000Z</updated>
    <content type="html"><![CDATA[<p><a id="more"></a></p>
<h2 id="数据库操作">数据库操作</h2>
<hr>
<ul>
<li>切换、创建数据库    <code>use yourDB</code></li>
<li>查询所有数据库    <code>show dbs</code></li>
<li>删除当前使用数据库    <code>db.dropDatabase()</code></li>
<li>从指定主机上克隆数据库    <code>db.cloneDatabase(&quot;127.0.0.1&quot;)</code></li>
<li>从指定的机器复制数据库数据到某个数据库    <code>db.copyDatabase(&quot;mydb&quot;,&quot;temp&quot;,&quot;127.0.0.1&quot;)</code></li>
<li>修复数据库    <code>db.repairDatabase()</code></li>
<li>查看当前使用的数据库    <code>db.getName</code>或<code>db</code></li>
<li>显示当前数据库状态 <code>db.stats()</code></li>
<li>当前db版本    <code>db.version()</code></li>
<li>查看当前数据库机器地址    <code>db.getMongo()</code></li>
</ul>
<h2 id="集合操作">集合操作</h2>
<hr>
<ul>
<li>创建集合    <code>db.createCollection(&#39;collName&#39;,{size:20,capped:5,max:100})</code> 创建成功会显示<code>{&quot;ok&quot;:1}</code></li>
<li>得到指定名称的集合    <code>db.getCollection(&quot;account&quot;)</code></li>
<li>得到当前数据库所有集合    <code>db.getCollectionNames()</code></li>
<li>得到当前数据库所有集合索引的状态    <code>db.printCollectionStats()</code></li>
</ul>
<h2 id="用户相关">用户相关</h2>
<hr>
<ul>
<li>添加用户    <code>db.addUser(&quot;name&quot;)</code>和<code>db.addUser(&quot;userName&quot;,&quot;pwd123&quot;,true)</code> 设置密码、是否只读</li>
<li>数据库认证    <code>db.auth(&quot;userName&quot;,&quot;123123&quot;)</code></li>
<li>显示当前所用用户    <code>show users</code></li>
<li>删除用户    <code>db.removeUser(&quot;userName&quot;)</code></li>
</ul>
<h2 id="集合查询">集合查询</h2>
<hr>
<ul>
<li>查询所用记录    <code>db.userInfo.find()</code> 默认每页显示20条记录</li>
<li>查询去掉后的当前集合中的某列的重复数据    <code>db.userInfo.disinct(&quot;name&quot;)</code></li>
<li>查询(等于) <code>db.userInfo.find({&quot;gae&quot;:22})</code> 查询age==22的集合</li>
<li>查询(大于)    <code>db.userInfo.find({&quot;age&quot;:{$gt:22}})</code><br>  小于<code>$lt</code> 大于等于<code>$glt</code> 小于等于<code>$lte</code> </li>
<li>包含    <code>db.userInfo.find({name:/mongo/})</code></li>
<li>开头    <code>db.userInfo.find({name:/^mongo/})</code></li>
<li>查询指定列name、age    <code>db.userInfo.find({},{name:1,age:1})</code></li>
<li>查询指定数据    <code>db.userInfo.find({age:{$gt25}},{name:1,age:1})</code></li>
<li>排序    <code>db.userInfo.find().sort({age:1})</code><br>  降序    <code>db.userInfo.find().sort({age:-1})</code></li>
<li>查询前5条数据    <code>db.userInfo.find().limit(5)</code></li>
<li>查询10条以后的数据    <code>db.userInfo.find().skip(10)</code></li>
<li>查询5-10条数据    <code>db.userInfo.find().limit(10).skip(5)</code></li>
<li>与查询    <code>db.userInfo.find({$or:[{age:22},{age:25}]})</code></li>
<li>查询第一条数据    <code>db.userInfo.findOne()</code></li>
<li>查询集合的条数    <code>db.userInfo.find().count()</code></li>
<li>按某列进行排序    <code>db.userInfo.find({sex:{$exists:true}}).count()</code></li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<p>]]></summary>
    
      <category term="MongoDB" scheme="http://seniorzhai.github.io/tags/MongoDB/"/>
    
      <category term="node.js" scheme="http://seniorzhai.github.io/categories/node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Mongoose]]></title>
    <link href="http://seniorzhai.github.io/2015/03/05/%E4%BD%BF%E7%94%A8Mongoose/"/>
    <id>http://seniorzhai.github.io/2015/03/05/使用Mongoose/</id>
    <published>2015-03-05T03:11:52.000Z</published>
    <updated>2015-03-05T04:27:58.000Z</updated>
    <content type="html"><![CDATA[<p>Mongoose是MongoDB的一个对象模型工具，是基于node-mongodb-native开发的MongoDB nodejs驱动，可以在异步的环境下执行。同时它也是针对MongoDB操作的一个对象模型库，封装了MongoDB对文档的的一些增删改查等常用方法，让NodeJS操作Mongodb数据库变得更加灵活简单。<br><a id="more"></a></p>
<h2 id="安装及引用">安装及引用</h2>
<ol>
<li>安装</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="operator"><span class="keyword">install</span> mongoose</span></div></pre></td></tr></table></figure>

<ol>
<li>引用mongoose</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>);</div></pre></td></tr></table></figure>

<ol>
<li>使用<code>mongoose</code>链接数据库</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> db = mongoose(<span class="string">"mongodb://user:pass@localhost:port/database"</span>);</div></pre></td></tr></table></figure>

<ol>
<li>示例</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>);</div><div class="line"><span class="keyword">var</span> db = mongoose.connect(<span class="string">"mongodb://127.0.0.1:27017/test"</span>);</div><div class="line">db.connection.on(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span> <span class="params">(error)</span> </span>{</div><div class="line">   	<span class="built_in">console</span>.log(<span class="string">"数据库连接失败："</span> + error);</div><div class="line">});</div><div class="line">db.connection.on(<span class="string">"open"</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">   	<span class="built_in">console</span>.log(<span class="string">"------数据库连接成功！------"</span>);</div><div class="line">});</div></pre></td></tr></table></figure>

<h2 id="MongoDB基础">MongoDB基础</h2>
<p>MongoDB——是一个对象数据库，没有表和行等概念，没有固定的模式和结构，所有的数据以Document的形式存储，多个Document可以组成一个Collection，多个集合组成了数据库。<br>Document(文档)是MongoDB的核心概念，是键值对的有序集合，在JS中表示成对象，他是MongoDB的基本单元，类似于关系型数据库中的行。Collection(集合)则更像是表的概念。</p>
<h3 id="Schema">Schema</h3>
<p>Schema —— 一种以文件形式存储的数据库模型骨架，无法直接通往数据库端，也就是说它不具备对数据库的操作能力，仅仅只是数据库模型在程序片段中的一种表现，可以说是数据属性模型(传统意义的表结构)，又或着是“集合”的模型骨架。<br>定义</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> TestSchema = <span class="keyword">new</span> mongoose.Schema({</div><div class="line">	name : {type:<span class="built_in">String</span>},</div><div class="line">	age : {type:<span class="built_in">Number</span>,<span class="keyword">default</span>:<span class="number">0</span>},</div><div class="line">	time : {type:<span class="built_in">Date</span>,<span class="keyword">default</span>:<span class="built_in">Date</span>.now},</div><div class="line">	emial : {type:<span class="built_in">String</span>,<span class="keyword">default</span>:<span class="string">''</span>}</div><div class="line">});</div></pre></td></tr></table></figure>

<p>基本属性类型有：<code>字符串</code>、<code>日期型</code>、<code>数值型</code>、<code>布尔型(Boolean)</code>、<code>null</code>、<code>数组</code>、<code>内嵌文档</code>等</p>
<h3 id="Model">Model</h3>
<p>Model —— 由Schema构造生成的模型，除了Schema定义的数据库骨架以外，还具有数据库操作的行为，类似于管理数据库属性、行为的类。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> db = mongoose.connect(<span class="string">"mongodb://127.0.0.1:27017/test"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 通过Schema创建Model</span></div><div class="line"><span class="keyword">var</span> TestModel = db.model(<span class="string">"test1"</span>, TestSchema);</div></pre></td></tr></table></figure>

<p>数据库中的集合名称,当我们对其添加数据时如果test1已经存在，则会保存到其目录下，如果未存在，则会创建test1集合，然后在保存数据。</p>
<h3 id="Entity">Entity</h3>
<p>Entity —— 由Model创建的实体，使用save方法保存数据，Model和Entity都有能影响数据库的操作，但Model比Entity更具操作性。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> TestEntity = <span class="keyword">new</span> TestModel({</div><div class="line">	name : <span class="string">"Lenka"</span>,</div><div class="line">	age : <span class="number">36</span>,</div><div class="line">	email : <span class="string">"lenka@qq.com"</span></div><div class="line">});</div><div class="line"><span class="built_in">console</span>.log(TestEntity.name); <span class="comment">// Lenka</span></div><div class="line"><span class="built_in">console</span>.log(TestEntity.age); <span class="comment">// 36</span></div></pre></td></tr></table></figure>

<p>完整示例</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>);</div><div class="line"><span class="keyword">var</span> db = mongoose.connect(<span class="string">"mongodb://127.0.0.1:27017/test"</span>);</div><div class="line"><span class="keyword">var</span> TestSchema = <span class="keyword">new</span> mongoose.Schema({</div><div class="line">	name : {type:<span class="built_in">String</span>},</div><div class="line">	age : {type:<span class="built_in">Number</span>,<span class="keyword">default</span>:<span class="number">0</span>},</div><div class="line">	email : {type:<span class="built_in">String</span>},</div><div class="line">	time : {type:<span class="built_in">Date</span>,<span class="keyword">default</span>:<span class="built_in">Date</span>.now}</div><div class="line">});</div><div class="line"><span class="keyword">var</span> TestModel = db.model(<span class="string">"test1"</span>,TestSchema);</div><div class="line"><span class="keyword">var</span> TestEntity = <span class="keyword">new</span> TestModel({</div><div class="line">	name:<span class="string">'helloworld'</span>,</div><div class="line">	age:<span class="number">28</span>,</div><div class="line">	emial:<span class="string">'helloworld@qq.com'</span></div><div class="line">});</div><div class="line">TestEntity.save(<span class="function"><span class="keyword">function</span><span class="params">(err,doc)</span></span>{</div><div class="line">	<span class="keyword">if</span>(error){</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">"error :"</span> + error);</div><div class="line">	} <span class="keyword">else</span> {</div><div class="line">		<span class="built_in">console</span>.log(doc);</div><div class="line">	}</div><div class="line">});</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<p>Mongoose是MongoDB的一个对象模型工具，是基于node-mongodb-native开发的MongoDB nodejs驱动，可以在异步的环境下执行。同时它也是针对MongoDB操作的一个对象模型库，封装了MongoDB对文档的的一些增删改查等常用方法，让NodeJS操作Mongodb数据库变得更加灵活简单。<br>]]></summary>
    
      <category term="Mongoose" scheme="http://seniorzhai.github.io/tags/Mongoose/"/>
    
      <category term="MongoDB" scheme="http://seniorzhai.github.io/tags/MongoDB/"/>
    
      <category term="node.js" scheme="http://seniorzhai.github.io/categories/node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[npm镜像]]></title>
    <link href="http://seniorzhai.github.io/2015/03/05/npm%E9%95%9C%E5%83%8F/"/>
    <id>http://seniorzhai.github.io/2015/03/05/npm镜像/</id>
    <published>2015-03-05T01:25:33.000Z</published>
    <updated>2015-03-05T01:35:49.000Z</updated>
    <content type="html"><![CDATA[<p>npm全称<code>Node Package Manager</code>，是node.js的模块依赖管理工具，由于npm的源在国外，所以国内使用起来————<code>你懂的</code>。<br><a id="more"></a><br>下面是一部分国内优秀的npm镜像资源</p>
<h2 id="国内NPM镜像">国内NPM镜像</h2>
<hr>
<h3 id="淘宝npm镜像">淘宝npm镜像</h3>
<ul>
<li>搜索地址：<code>http://npm.taobao.org</code></li>
<li>registry：<code>http://registry.npm.taobao.org</code></li>
</ul>
<h3 id="cnpmjs镜像">cnpmjs镜像</h3>
<ul>
<li>搜索地址：<code>http://cnpmjs.org</code></li>
<li>registry：<code>http://r.cnpmjs.org</code></li>
</ul>
<h2 id="使用">使用</h2>
<hr>
<ol>
<li>临时使用</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> --registry <span class="attribute">https</span>:<span class="regexp">//</span>registry.<span class="built_in">npm</span>.taobao.org install express</div></pre></td></tr></table></figure>

<ol>
<li>持久是欧诺个</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> config set registry <span class="attribute">http</span>:<span class="regexp">//</span>registry.<span class="built_in">npm</span>.taobao.org</div><div class="line"><span class="built_in">npm</span> config get registry <span class="comment">## 验证查看</span></div><div class="line"><span class="built_in">npm</span> info express <span class="comment">## 验证</span></div></pre></td></tr></table></figure>

<ol>
<li>通过cnpm使用(强烈建议使用)</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm <span class="operator"><span class="keyword">install</span> -g cnpm <span class="comment">--registry=https://registry.npm.taobao.org</span></span></div><div class="line">## 使用</div><div class="line">cnpm <span class="keyword">install</span> express</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<p>npm全称<code>Node Package Manager</code>，是node.js的模块依赖管理工具，由于npm的源在国外，所以国内使用起来————<code>你懂的</code>。<br>]]></summary>
    
      <category term="node" scheme="http://seniorzhai.github.io/tags/node/"/>
    
      <category term="npm" scheme="http://seniorzhai.github.io/tags/npm/"/>
    
      <category term="镜像" scheme="http://seniorzhai.github.io/tags/%E9%95%9C%E5%83%8F/"/>
    
      <category term="node.js" scheme="http://seniorzhai.github.io/categories/node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[部署Meteor]]></title>
    <link href="http://seniorzhai.github.io/2015/03/02/%E9%83%A8%E7%BD%B2Meteor/"/>
    <id>http://seniorzhai.github.io/2015/03/02/部署Meteor/</id>
    <published>2015-03-02T08:47:22.000Z</published>
    <updated>2015-03-02T11:41:57.000Z</updated>
    <content type="html"><![CDATA[<p><a id="more"></a></p>
<h2 id="部署在Meteor">部署在Meteor</h2>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meteor deploy myapp.meteor.<span class="keyword">com</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<p>]]></summary>
    
      <category term="meteor" scheme="http://seniorzhai.github.io/tags/meteor/"/>
    
      <category term="node.js" scheme="http://seniorzhai.github.io/tags/node-js/"/>
    
      <category term="web app" scheme="http://seniorzhai.github.io/tags/web-app/"/>
    
      <category term="node.js" scheme="http://seniorzhai.github.io/categories/node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[androidannotations(一)]]></title>
    <link href="http://seniorzhai.github.io/2015/02/28/androidannotations(%E4%B8%80)/"/>
    <id>http://seniorzhai.github.io/2015/02/28/androidannotations(一)/</id>
    <published>2015-02-28T13:30:45.000Z</published>
    <updated>2015-03-16T13:29:41.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/excilys/androidannotations" target="_blank" rel="external">androidannotations</a>是一款Android注入框架，可以方便我们编程，减少代码量(变相减少了错误的可能)，让我们可以更多的把精力放在逻辑处理上。<br><a id="more"></a><br>本文API介绍取至<a href="https://github.com/excilys/androidannotations/wiki/Cookbook" target="_blank" rel="external">https://github.com/excilys/androidannotations/wiki/Cookbook</a></p>
<h2 id="特征">特征</h2>
<ul>
<li>依赖注入</li>
<li>简单的后台任务模型</li>
<li>事件绑定</li>
<li>REST</li>
</ul>
<h2 id="配置">配置</h2>
<p>在AS中，需要在项目的<code>build.gradle</code>中进行加入如下配置（有注释部分）</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'com.android.application'</span></div><div class="line">apply plugin: <span class="string">'android-apt'</span></div><div class="line"></div><div class="line"><span class="keyword">buildscript</span> {</div><div class="line">	<span class="keyword">repositories</span> {</div><div class="line">		mavenCentral()</div><div class="line">	}</div><div class="line">	<span class="keyword">dependencies</span> {</div><div class="line"> 		<span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:1.0.0'</span></div><div class="line"> 		<span class="comment">// 使用android-apt</span></div><div class="line">        <span class="keyword">classpath</span> <span class="string">'com.neenbedankt.gradle.plugins:android-apt:1.4'</span></div><div class="line">	}</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">repositories</span> {</div><div class="line">    mavenCentral()</div><div class="line">    mavenLocal()</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> {</div><div class="line">	<span class="keyword">def</span> AAVersion = <span class="string">'3.2'</span></div><div class="line">	<span class="comment">// 设置版本</span></div><div class="line">	apt <span class="string">"org.androidannotations:androidannotations:$AAVersion"</span> </div><div class="line">	<span class="keyword">compile</span> <span class="string">"org.androidannotations:androidannotations-api:$AAVersion"</span></div><div class="line">}</div><div class="line"></div><div class="line">apt {</div><div class="line">    arguments {</div><div class="line">        androidManifestFile variant.outputs[<span class="number">0</span>].processResources.manifestFile</div><div class="line">        resourcePackageName <span class="string">'com.myproject.name'</span>	<span class="comment">// 指定包名</span></div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="使用">使用</h2>
<ul>
<li>基本使用示例</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@EActivity</span>(R.layout.translate)	<span class="comment">// 设置布局文件</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TranslateActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>{</div><div class="line">	<span class="annotation">@ViewById</span>	<span class="comment">// 注入 等同于 findViewById(R.id.textInput)</span></div><div class="line">	EditText textInput;</div><div class="line"></div><div class="line">	<span class="annotation">@ViewById</span>(R.id.myTextView)</div><div class="line">	TextView result;</div><div class="line"></div><div class="line">	<span class="annotation">@AnimationRes</span>	<span class="comment">// 获取 anroid.R.anim.fade_in</span></div><div class="line">	Animation fadeIn;</div><div class="line"></div><div class="line">	<span class="annotation">@Click</span>	<span class="comment">// 设置R.id.doTranslate的监听</span></div><div class="line">	<span class="keyword">void</span> doTranslate() {</div><div class="line">		translateInBackground(textInput.getText().toString());</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="annotation">@Background</span> <span class="comment">// 后台线程</span></div><div class="line">    <span class="keyword">void</span> translateInBackground(String textToTranslate) {</div><div class="line">        String translatedText = callGoogleTranslate(textToTranslate);</div><div class="line">        showResult(translatedText);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="annotation">@UiThread</span> <span class="comment">// UI线程</span></div><div class="line">    <span class="keyword">void</span> showResult(String translatedText) {</div><div class="line">        result.setText(translatedText);</div><div class="line">        result.startAnimation(fadeIn);</div><div class="line">    }</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Activity">Activity</h3>
<ul>
<li><code>@EActivity</code>注入Activity</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@EActivity</span>(R.layout.main)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>{</div><div class="line">	</div><div class="line">}</div></pre></td></tr></table></figure>

<p>也可以不注入</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@EActivity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListActivity</span> <span class="keyword">extends</span> <span class="title">ListActivity</span> </span>{</div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span>(Bundle savedInstanceState) {</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.main);</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>


<pre><code>注：使用Androidannotations注入的Activity在AndroidManifest<span class="built_in">.</span><span class="built_in">xml</span>中配置时，名字后需要加上_，如MainActivity则为<span class="built_in">.</span>MainActivity_
</code></pre><h3 id="Fragment">Fragment</h3>
<ul>
<li><code>@EFragment</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@EFragment</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>{</div><div class="line">	</div><div class="line">}</div></pre></td></tr></table></figure>

<p>在布局中需要使用<code>MyFragment_</code>表示</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">LinearLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"fill_parent"</span></div><div class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"fill_parent"</span></div><div class="line">    <span class="attribute">android:orientation</span>=<span class="value">"horizontal"</span> &gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="title">fragment</span></span></div><div class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/myFragment"</span></div><div class="line">        <span class="attribute">android:name</span>=<span class="value">"com.company.MyFragment_"</span></div><div class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"fill_parent"</span></div><div class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"fill_parent"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>

<p>在程序中使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MyFragment fragment = <span class="keyword">new</span> MyFragment_();</div></pre></td></tr></table></figure>

<p>也可以注入布局</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@EFragment</span>(R.layout.my_custom_layout)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFragment</span> <span class="keyword">extends</span> <span class="title">ListFragment</span> </span>{</div><div class="line">  <span class="comment">// R.layout.my_custom_layout will be injected</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>获取Fragment时</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@EActivity</span>(R.layout.fragments)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFragmentActivity</span> <span class="keyword">extends</span> <span class="title">FragmentActivity</span> </span>{</div><div class="line">  <span class="annotation">@FragmentById</span></div><div class="line">  MyFragment myFragment;</div><div class="line"></div><div class="line">  <span class="annotation">@FragmentById</span>(R.id.myFragment)</div><div class="line">  MyFragment myFragment2;</div><div class="line"></div><div class="line">  <span class="annotation">@FragmentByTag</span></div><div class="line">  MyFragment myFragmentTag;</div><div class="line"></div><div class="line">  <span class="annotation">@FragmentByTag</span>(<span class="string">"myFragmentTag"</span>)</div><div class="line">  MyFragment myFragmentTag2;</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="自定义控件">自定义控件</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@EView</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomButton</span> <span class="keyword">extends</span> <span class="title">Button</span> </span>{</div><div class="line">  <span class="annotation">@App</span></div><div class="line">  MyApplication application;</div><div class="line"></div><div class="line">  <span class="annotation">@StringRes</span></div><div class="line">  <span class="keyword">public</span> <span class="title">CustomButton</span>(Context context,AttributeSet attrs) {</div><div class="line">    <span class="keyword">super</span>.(context,attrs);</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>在布局中使用时</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- ... --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">com.myapp.view.CustomButton_</span></span></div><div class="line">  <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></div><div class="line">  <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></div><div class="line">  /&gt;</div></pre></td></tr></table></figure>

<h3 id="自定义ViewGroups">自定义ViewGroups</h3>
<p>layout</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">merge</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span> &gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="title">ImageView</span></span></div><div class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/image"</span></div><div class="line">        <span class="attribute">android:layout_alignParentRight</span>=<span class="value">"true"</span></div><div class="line">        <span class="attribute">android:layout_alignBottom</span>=<span class="value">"@+id/title"</span></div><div class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></div><div class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></div><div class="line">        <span class="attribute">android:src</span>=<span class="value">"@drawable/check"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="title">TextView</span></span></div><div class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/title"</span></div><div class="line">        <span class="attribute">android:layout_toLeftOf</span>=<span class="value">"@+id/image"</span></div><div class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></div><div class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></div><div class="line">        <span class="attribute">android:textColor</span>=<span class="value">"@android:color/white"</span></div><div class="line">        <span class="attribute">android:textSize</span>=<span class="value">"12pt"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="title">TextView</span></span></div><div class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/subtitle"</span></div><div class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></div><div class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></div><div class="line">        <span class="attribute">android:layout_below</span>=<span class="value">"@+id/title"</span></div><div class="line">        <span class="attribute">android:textColor</span>=<span class="value">"#FFdedede"</span></div><div class="line">        <span class="attribute">android:textSize</span>=<span class="value">"10pt"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="title">merge</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Java代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@EViewGroup</span>(R.layout.title_with_subtitle)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TitleWithSubtitle</span> <span class="keyword">extends</span> <span class="title">RelativeLayout</span> </span>{</div><div class="line">  <span class="annotation">@ViewById</span></div><div class="line">  <span class="keyword">protected</span> TextView title,subtitle;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="title">TitleWithSubtitle</span>(Context context,AttributeSet attrs) {</div><div class="line">    <span class="keyword">super</span>(context,attrs);</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTexts</span>(String titleText,String subTitleText) {</div><div class="line">    title.setText(titleText);</div><div class="line">    subtitle.setText(subTitleText);</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">com.myapp.viewgroup.TitleWithSubtitle_</span></span></div><div class="line">  <span class="attribute">android:id</span>=<span class="value">"@+id/firstTitle"</span></div><div class="line">  <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></div><div class="line">  <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></div><div class="line">  /&gt;</div></pre></td></tr></table></figure>

<h3 id="Service">Service</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@EService</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">IntentService</span> </span>{</div><div class="line">  <span class="annotation">@SystemService</span></div><div class="line">  NotificationManager notificationManager;</div><div class="line">  </div><div class="line">  <span class="annotation">@Bean</span> </div><div class="line">  MyEnhancedDatastore datastore;</div><div class="line"></div><div class="line">  <span class="annotation">@RestService</span></div><div class="line">  MyRestClient = myRestClient;</div><div class="line"></div><div class="line">  <span class="annotation">@OrmLiteDao</span>(helper = DatabaseHelper.class,model = User.class)</div><div class="line">  UserDao userDao;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="title">MyService</span>() {</div><div class="line">    <span class="keyword">super</span>(MyService.class.getSimpleName);</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="annotation">@Override</span></div><div class="line">  proteced <span class="keyword">void</span> onHandleIntent(Intent intent){</div><div class="line">    showTast();</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="annotation">@UiThread</span></div><div class="line">  <span class="keyword">void</span> showToast() {</div><div class="line">    Toast.makeText(getApplicationContext(),<span class="string">"Hi~"</span>,Toast.LENGTH_LONG).show();</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>对于IntentService还可以设置一些操作</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@ServiceAction</span></div><div class="line"><span class="keyword">void</span> mySimpleAction(String param) {</div><div class="line">  <span class="comment">//...</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>通过<code>MyIntentService_.intent(getApplication()).myAction(&quot;test&quot;).start()</code>使用</p>
<h2 id="获取资源">获取资源</h2>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// String</span></div><div class="line"><span class="annotation">@StringRes</span>(R.string.hello)</div><div class="line">String myHelloString;</div><div class="line"><span class="annotation">@StringRes</span></div><div class="line">String hello;</div><div class="line"><span class="comment">// Color</span></div><div class="line"><span class="annotation">@ColorRes</span>(R.color.backgroundColor)</div><div class="line"><span class="keyword">int</span> someColor;</div><div class="line"><span class="annotation">@ColorRes</span></div><div class="line"><span class="keyword">int</span> backgoundColor;</div><div class="line"><span class="comment">// animation</span></div><div class="line"><span class="annotation">@AnimationRes</span>(R.anim.fadein)</div><div class="line">Animation fadein;</div><div class="line"><span class="annotation">@AnimationRes</span></div><div class="line">Animation fadein;</div><div class="line"><span class="comment">// DimensionRes</span></div><div class="line"><span class="annotation">@DimensionRes</span>(R.dimen.fontsize)</div><div class="line"><span class="keyword">float</span> fontSizeDimension;</div><div class="line"><span class="annotation">@DimensionRes</span></div><div class="line"><span class="keyword">float</span> fontsize;</div><div class="line"><span class="comment">// 换算成PX</span></div><div class="line"><span class="annotation">@DimensionPixelOffsetRes</span>(R.sting.fontsize)</div><div class="line"><span class="keyword">int</span> fontSizeDimension;</div><div class="line"><span class="annotation">@DimensionPixelOffsetRes</span></div><div class="line"><span class="keyword">int</span> fontsize;</div></pre></td></tr></table></figure>

<p>其他</p>
<ul>
<li>@BooleanRes</li>
<li>@ColorStateListRes</li>
<li>@DrawableRes</li>
<li>@IntArrayRes</li>
<li>@IntegerRes</li>
<li>@LayoutRes</li>
<li>@MovieRes</li>
<li>@TextRes</li>
<li>@TextArrayRes</li>
<li>@StringArrayRes</li>
</ul>
<h3 id="Intent">Intent</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@EActivity</span> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>{</div><div class="line">  <span class="annotation">@Extra</span>(<span class="string">"myStringExtra"</span>) <span class="comment">// 也可以胜利</span></div><div class="line">  String myMessage;</div><div class="line">  <span class="annotation">@Extra</span>(<span class="string">"myDateExtra"</span>)</div><div class="line">  Date myDate = <span class="keyword">new</span> Date();</div><div class="line"></div><div class="line">  <span class="annotation">@Override</span></div><div class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onNewIntent</span>(Intent intent) {</div><div class="line">    <span class="comment">// 再次注入时</span></div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="annotation">@AfterExtras</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomethingAfterExtrasInjection</span>() {</div><div class="line">    <span class="comment">//</span></div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<p><a href="https://github.com/excilys/androidannotations" target="_blank" rel="external">androidannotations</a>是一款Android注入框架，可以方便我们编程，减少代码量(变相减少了错误的可能)，让我们可以更多的把精力放在逻辑处理上。<br>]]></summary>
    
      <category term="注入" scheme="http://seniorzhai.github.io/tags/%E6%B3%A8%E5%85%A5/"/>
    
      <category term="Android" scheme="http://seniorzhai.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android开发贴士]]></title>
    <link href="http://seniorzhai.github.io/2015/02/28/Android%E5%BC%80%E5%8F%91%E8%B4%B4%E5%A3%AB/"/>
    <id>http://seniorzhai.github.io/2015/02/28/Android开发贴士/</id>
    <published>2015-02-28T02:26:01.000Z</published>
    <updated>2015-02-28T02:47:52.000Z</updated>
    <content type="html"><![CDATA[<p>转至<a href="http://blog.danlew.net/2014/03/30/android-tips-round-up-part-1/" target="_blank" rel="external">http://blog.danlew.net/2014/03/30/android-tips-round-up-part-1/</a><br><a id="more"></a><br><a href="http://developer.android.com/reference/android/app/Activity.html#startActivities(android.content.Intent[]" target="_blank" rel="external">Activity.startActivities()</a>)——对于从app流的中部启动会非常好。</p>
<p><a href="http://developer.android.com/reference/android/text/TextUtils.html#isEmpty(java.lang.CharSequence" target="_blank" rel="external">TextUtils.isEmpty()</a>)——一个普遍适用的简单工具类。</p>
<p><a href="http://developer.android.com/reference/android/text/TextUtils.html#isEmpty(java.lang.CharSequence" target="_blank" rel="external">Html.fromHtml()</a>)——格式化Html的快速方法，本人认为它也不是非常快，所以我不是经常用它（我说不经常用它是为了重点突出这句话：请多手动构建Spannable来替换Html.fromHtml），但是它对渲染从web上获取的文字还是很不错的。</p>
<p><a href="http://developer.android.com/reference/android/widget/TextView.html#setError%28java.lang.CharSequence%29" target="_blank" rel="external">TextView.setError()</a>——在验证用户输入的时候用户体验很不错。</p>
<p><a href="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html" target="_blank" rel="external">Build.VERSION_CODES</a>——它不仅仅描述了版本号，还总结了各Android版本的不同特性。</p>
<p><a href="http://developer.android.com/reference/android/util/Log.html#getStackTraceString(java.lang.Throwable" target="_blank" rel="external">Log.getStackTraceString()</a>)——方便的日志工具。</p>
<p><a href="http://developer.android.com/reference/android/view/LayoutInflater.html#from%28android.content.Context%29" target="_blank" rel="external">LayoutInflater.from()</a>——简化一系列冗长的getSystemService()调用的简单工具。</p>
<p><a href="http://developer.android.com/reference/android/view/ViewConfiguration.html#getScaledTouchSlop%28%29" target="_blank" rel="external">ViewConfiguration.getScaledTouchSlop()</a>——使用ViewConfiguration中提供的值以保证所有触摸的交互都是统一的。</p>
<p><a href="http://developer.android.com/reference/android/telephony/PhoneNumberUtils.html#convertKeypadLettersToDigits%28java.lang.String%29" target="_blank" rel="external">PhoneNumberUtils.convertKeypadLettersToDigits</a>——使得处理电话号码更方便，很多人都只提供字母，而不是数字。</p>
<p><a href="http://developer.android.com/reference/android/content/Context.html#getCacheDir%28%29" target="_blank" rel="external">Context.getCacheDir()</a>——使用系统提供的缓存目录进行数据缓存，操作非常简单不过很多人不知道怎么使用。</p>
<p><a href="http://developer.android.com/reference/android/animation/ArgbEvaluator.html" target="_blank" rel="external">ArgbEvaluators</a>——处理颜色的渐变。就像<a href="https://plus.google.com/108078989781026808271/posts/SbieMPqa2by" target="_blank" rel="external">Chris Banes</a>说的一样，这个类会进行很多自动装箱的操作，所以最好还是去掉它的逻辑自己去实现它。</p>
<p><a href="http://developer.android.com/reference/android/view/ContextThemeWrapper.html" target="_blank" rel="external">ContextThemeWrapper</a>——方便在运行过程中更改主题。</p>
<p><a href="http://developer.android.com/reference/android/widget/Space.html" target="_blank" rel="external">Space</a>——轻量级的视图组件，可以跳过绘制的过程，对于需要占位符的任何场景来说都是很棒的。</p>
<p><a href="http://developer.android.com/reference/android/animation/ValueAnimator.html#reverse%28%29" target="_blank" rel="external">ValueAnimator.reverse()</a>——可以顺畅地取消动画效果，很赞。</p>
<p><a href="http://developer.android.com/reference/android/text/format/DateUtils.html#formatDateTime%28android.content.Context,%20long,%20int%29" target="_blank" rel="external">DateUtils.formatDateTime()</a>——提供区域格式化时间/日期字符串的一站式服务。</p>
<p><a href="http://developer.android.com/reference/android/app/AlarmManager.html#setInexactRepeating(int, long, long, android.app.PendingIntent" target="_blank" rel="external">AlarmManager.setInexactRepeating</a>)——通过闹铃分组的方式来节省电量，即使你只调用一个alarm实例，它仍然比较好用（可以确保在使用完毕时自动调用AlarmManager.cancel()。</p>
<p><a href="http://developer.android.com/reference/android/text/format/Formatter.html#formatFileSize(android.content.Context, long" target="_blank" rel="external">Formatter.formatFileSize()</a>)——一个区域化的文件大小格式化工具。</p>
<p><a href="http://developer.android.com/reference/android/app/ActionBar.html#hide(" target="_blank" rel="external">ActionBar.hide()</a>) /<a href="http://developer.android.com/reference/android/app/ActionBar.html#show(" target="_blank" rel="external">.show()</a>)——可以在actionBar显示或者隐藏的时候进行动画展示。可以在切换到全屏的时候更优雅。</p>
<p><a href="http://developer.android.com/reference/android/text/util/Linkify.html#addLinks(android.text.Spannable, int" target="_blank" rel="external">Linkify.addLinks()</a>)——可以控制在Text上添加链接。</p>
<p><a href="http://developer.android.com/reference/android/text/StaticLayout.html" target="_blank" rel="external">StaticLayout</a>——在自定义View中渲染文字的时候很实用。</p>
<p><a href="http://developer.android.com/reference/android/app/Activity.html#onBackPressed(" target="_blank" rel="external">Activity.onBackPressed()</a>)——方便控制返回按钮，在需要自定义返回键的操作时候，可以用到。</p>
<p><a href="http://developer.android.com/reference/android/view/GestureDetector.html" target="_blank" rel="external">GestureDetector</a>——可以监听动作事件和相关的监听器事件（点击，滚动，滑动等）。比自己实现系统的一些动作事件更简单。</p>
<p><a href="http://developer.android.com/reference/android/graphics/DrawFilter.html" target="_blank" rel="external">DrawFilter</a>——可以让你操作Canvas，即使没有调用draw方法。例如，可以在创建自定义View的时候设置一个DrawFilter，给父View里面的所有View设置反别名。</p>
<p><a href="http://developer.android.com/reference/android/app/ActivityManager.html#getMemoryClass(" target="_blank" rel="external">ActivityManager.getMemoryClass()</a>)——可以让你清楚知道设备还剩多少内存。在计算怎么设置缓存大小的时候就很有用。</p>
<p><a href="http://developer.android.com/reference/android/os/SystemClock.html#sleep(long" target="_blank" rel="external">SystemClock.sleep()</a>)——这个方法在保证一定时间的sleep时很方便，通常我用来进行debug和模拟网络延时。</p>
<p><a href="http://developer.android.com/reference/android/view/ViewStub.html" target="_blank" rel="external">ViewStub</a>——它是一个初始化不做任何事情的View，但是之后可以载入一个布局文件。在慢加载View中很适合做占位符。唯一的缺点就是不支持标签，所以如果你不太小心的话，可能会在视图结构中加入不需要的嵌套。</p>
<p><a href="http://developer.android.com/reference/android/util/DisplayMetrics.html#density" target="_blank" rel="external">DisplayMetrics.density</a>——通过这个方法可以获取屏幕的密度，很多时候需要去掉系统自动缩放精度的功能，但是有时候在控制的时候也很有用（尤其是在自定义View的时候）。</p>
<p><a href="http://developer.android.com/reference/android/util/Pair.html#create(A, B" target="_blank" rel="external">Pair.create()</a>)——方便构建类和构造器的方法。</p>
<p><a href="http://developer.android.com/reference/android/net/UrlQuerySanitizer.html" target="_blank" rel="external">UrlQuerySanitizer</a>——使用这个工具可以方便对URL进行检查。</p>
<p><a href="http://developer.android.com/reference/android/app/Fragment.html#setArguments%28android.os.Bundle%29" target="_blank" rel="external">Fragment.setArguments</a>——因为在构建Fragment的时候不能加参数，所以这是个很好的东西，可以在创建Fragment之前设置参数（即使在configuration改变的时候仍然会导致销毁/重建）。</p>
<p><a href="http://developer.android.com/reference/android/app/DialogFragment.html#setShowsDialog%28boolean%29" target="_blank" rel="external">DialogFragment.setShowsDialog()</a>——这是一个很巧妙的方式，DialogFragment可以作为正常的Fragment显示！这里可以让Fragment承担双重任务。我通常在创建Fragment的时候把onCreateView()和onCreateDialog()都加上，就可以创建一个具有双重目的的Fragment。</p>
<p><a href="http://developer.android.com/reference/android/app/FragmentManager.html#enableDebugLogging%28boolean%29" target="_blank" rel="external">FragmentManager.enableDebugLogging()</a>——在需要观察Fragment状态的时候会有帮助。</p>
<p><a href="http://developer.android.com/reference/android/support/v4/content/LocalBroadcastManager.html" target="_blank" rel="external">LocalBroadcastManager</a>——这个会比全局的broadcast更加安全，简单，快速。像otto这样的Event buses机制对你的应用场景更加有用。</p>
<p><a href="http://developer.android.com/reference/android/telephony/PhoneNumberUtils.html#formatNumber%28java.lang.String%29" target="_blank" rel="external">PhoneNumberUtils.formatNumber()</a>——顾名思义，这是对数字进行格式化操作的时候用的。</p>
<p><a href="http://developer.android.com/reference/android/graphics/Region.html#op%28android.graphics.Region,%20android.graphics.Region,%20android.graphics.Region.Op%29" target="_blank" rel="external">Region.op()</a>——我发现在对比两个渲染之前的区域的时候很实用，如果你有两条路径，那么怎么知道它们是不是会重叠呢？使用这个方法就可以做到。</p>
<p><a href="http://developer.android.com/reference/android/app/Application.html#registerActivityLifecycleCallbacks%28android.app.Application.ActivityLifecycleCallbacks%29" target="_blank" rel="external">Application.registerActivityLifecycleCallbacks</a>——虽然缺少官方文档解释，不过我想它就是注册Activity的生命周期的一些回调方法（顾名思义），就是一个方便的工具。</p>
<p><a href="http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Types" target="_blank" rel="external">versionNameSuffix</a>——这个gradle设置可以让你在基于不同构建类型的manifest中修改版本名这个属性，例如，如果需要在在debug版本中以”-SNAPSHOT”结尾，那么就可以轻松的看出当前是debug版还是release版。</p>
<p><a href="http://developer.android.com/reference/android/database/CursorJoiner.html" target="_blank" rel="external">CursorJoiner</a>——如果你是只使用一个数据库的话，使用SQL中的join就可以了，但是如果收到的数据是来自两个独立的ContentProvider，那么CursorJoiner就很实用了。</p>
<p><a href="http://www.genymotion.com/" target="_blank" rel="external">Genymotion</a>——一个非常快的Android模拟器，本人一直在用。</p>
<p><a href="http://developer.android.com/guide/practices/screens_support.html#qualifiers" target="_blank" rel="external">-nodpi</a>——在没有特别定义的情况下，很多修饰符（-mdpi，-hdpi，-xdpi等等）都会默认自动缩放assets/dimensions，有时候我们需要保持显示一致，这种情况下就可以使用 -nodpi。</p>
<p><a href="http://developer.android.com/reference/android/content/BroadcastReceiver.html#setDebugUnregister%28boolean%29" target="_blank" rel="external">BroadcastRecevier.setDebugUnregister()</a>——又一个方便的调试工具。</p>
<p><a href="http://developer.android.com/reference/android/app/Activity.html#recreate%28%29" target="_blank" rel="external">Activity.recreate()</a>——强制让Activity重建。</p>
<p><a href="http://developer.android.com/reference/android/content/pm/PackageManager.html#checkSignatures%28java.lang.String,%20java.lang.String%29" target="_blank" rel="external">PackageManager.checkSignatures()</a>——如果同时安装了两个app的话，可以用这个方法检查。如果不进行签名检查的话，其他人可以轻易通过使用一样的包名来模仿你的app。</p>
<p><a href="http://developer.android.com/reference/android/app/Activity.html#isChangingConfigurations%28%29" target="_blank" rel="external">Activity.isChangingConfigurations()</a>——如果在Activity中configuration会经常改变的话，使用这个方法就可以不用手动做保存状态的工作了。</p>
<p><a href="http://developer.android.com/reference/android/content/SearchRecentSuggestionsProvider.html" target="_blank" rel="external">SearchRecentSuggestionsProvider</a>——可以创建最近提示效果的provider，是一个简单快速的方法。</p>
<p><a href="http://developer.android.com/reference/android/view/ViewTreeObserver.html" target="_blank" rel="external">ViewTreeObserver</a>——这是一个很棒的工具。可以进入到VIew里面，并监控View结构的各种状态，通常我都用来做View的测量操作（自定义视图中经常用到）。</p>
<p><a href="https://www.timroes.de/2013/09/12/speed-up-gradle/" target="_blank" rel="external">org.gradle.daemon=true</a>——这句话可以帮助减少Gradle构建的时间，仅在命令行编译的时候用到，因为Android Studio已经这样使用了。</p>
<p><a href="http://developer.android.com/reference/android/database/DatabaseUtils.html" target="_blank" rel="external">DatabaseUtils</a>——一个包含各种数据库操作的使用工具。</p>
<p><a href="http://developer.android.com/reference/android/widget/LinearLayout.html#attr_android:weightSum" target="_blank" rel="external">android:weightSum (LinearLayout)</a>——如果想使用layout weights，但是却不想填充整个LinearLayout的话，就可以用weightSum来定义总的weight大小。</p>
<p><a href="http://developer.android.com/reference/android/view/View.html#attr_android:duplicateParentState" target="_blank" rel="external">android:duplicateParentState (View)</a>——此方法可以使得子View可以复制父View的状态。比如如果一个ViewGroup是可点击的，那么可以用这个方法在它被点击的时候让它的子View都改变状态。</p>
<p><a href="http://developer.android.com/reference/android/view/ViewGroup.html#attr_android:clipChildren" target="_blank" rel="external">android:clipChildren (ViewGroup)</a>——如果此属性设置为不可用，那么ViewGroup的子View在绘制的时候会超出它的范围，在做动画的时候需要用到。</p>
<p><a href="http://developer.android.com/reference/android/widget/ScrollView.html#attr_android:fillViewport" target="_blank" rel="external">android:fillViewport (ScrollView)</a>——在这片文章中有详细介绍文章链接，可以解决在ScrollView中当内容不足的时候填不满屏幕的问题。</p>
<p><a href="http://developer.android.com/guide/topics/resources/drawable-resource.html#Bitmap" target="_blank" rel="external">android:tileMode (BitmapDrawable)</a>——可以指定图片使用重复填充的模式。</p>
<p><a href="http://developer.android.com/reference/android/R.attr.html#exitFadeDuration" target="_blank" rel="external">android:enterFadeDuration/android:exitFadeDuration (Drawables)</a>——此属性在Drawable具有多种状态的时候，可以定义它展示前的淡入淡出效果。</p>
<p><a href="http://developer.android.com/reference/android/widget/ImageView.html#attr_android:scaleType" target="_blank" rel="external">android:scaleType (ImageView)</a>——定义在ImageView中怎么缩放/剪裁图片，一般用的比较多的是“centerCrop”和“centerInside”。</p>
<p><a href="http://developer.android.com/training/improving-layouts/reusing-layouts.html#Merge" target="_blank" rel="external"><merge></merge></a>——此标签可以在另一个布局文件中包含别的布局文件，而不用再新建一个ViewGroup，对于自定义ViewGroup的时候也需要用到；可以通过载入一个带有标签的布局文件来自动定义它的子部件。</p>
<p><a href="http://developer.android.com/reference/android/util/AtomicFile.html" target="_blank" rel="external">AtomicFile</a>——通过使用备份文件进行文件的原子化操作。这个知识点之前我也写过，不过最好还是有出一个官方的版本比较好。</p>
<p><a href="https://developer.android.com/reference/android/support/v4/widget/ViewDragHelper.html" target="_blank" rel="external">ViewDragHelper</a> ——视图拖动是一个比较复杂的问题。这个类可以帮助解决不少问题。如果你需要一个例子，DrawerLayout就是利用它实现扫滑。Flavient Laurent 还写了一些关于这方面的优秀文章。</p>
<p><a href="https://developer.android.com/reference/android/widget/PopupWindow.html" target="_blank" rel="external">PopupWindow</a>——Android到处都在使用PopupWindow ，甚至你都没有意识到（标题导航条ActionBar，自动补全AutoComplete，编辑框错误提醒Edittext Errors）。这个类是创建浮层内容的主要方法。</p>
<p><a href="https://developer.android.com/reference/android/app/ActionBar.htmlgetThemedContext(" target="_blank" rel="external">Actionbar.getThemrContext()</a>)——导航栏的主题化是很复杂的（不同于Activity其他部分的主题化）。你可以得到一个上下文（Context），用这个上下文创建的自定义组件可以得到正确的主题。</p>
<p><a href="https://developer.android.com/reference/android/media/ThumbnailUtils.html" target="_blank" rel="external">ThumbnailUtils</a>——帮助创建缩略图。通常我都是用现有的图片加载库（比如，Picasso 或者 Volley），不过这个ThumbnaiUtils可以创建视频缩略图。<br>译者注：该API从V8才开始支持。</p>
<p><a href="https://developer.android.com/reference/android/content/Context.htmlgetExternalFilesDir(java.lang.String" target="_blank" rel="external">Context.getExternalFilesDir()</a>)————申请了SD卡写权限后，你可以在SD的任何地方写数据，把你的数据写在设计好的合适位置会更加有礼貌。这样数据可以及时被清理，也会有更好的用户体验。此外，Android 4.0 Kitkat中在这个文件夹下写数据是不需要权限的，每个用户有自己的独立的数据存储路径。<br>译者注：该API从V8才开始支持。</p>
<p><a href="https://developer.android.com/reference/android/util/SparseArray.html" target="_blank" rel="external">SparseArray——Map</a>的高效优化版本。推荐了解姐妹类SparseBooleanArray、SparseIntArray和SparseLongArray。</p>
<p><a href="https://developer.android.com/reference/android/content/pm/PackageManager.htmlsetComponentEnabledSetting(android.content.ComponentName,%20int,%20int" target="_blank" rel="external">PackageManager.setComponentEnabledSetting()</a>)——可以用来启动或者禁用程序清单中的组件。对于关闭不需要的功能组件是非常赞的，比如关掉一个当前不用的广播接收器。</p>
<p><a href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.htmlyieldIfContendedSafely(" target="_blank" rel="external">SQLiteDatabase.yieldIfContendedSafely()</a>)——让你暂时停止一个数据库事务， 这样你可以就不会占用太多的系统资源。</p>
<p><a href="https://developer.android.com/reference/android/os/Environment.html#getExternalStoragePublicDirectory(java.lang.String" target="_blank" rel="external">Environment.getExternalStoragePublicDirectory()</a>)——还是那句话，用户期望在SD卡上得到统一的用户体验。用这个方法可以获得在用户设备上放置指定类型文件（音乐、图片等）的正确目录。</p>
<p><a href="https://developer.android.com/reference/android/view/View.htmlgenerateViewId(" target="_blank" rel="external">View.generateViewId()</a>)——每次我都想要推荐动态生成控件的ID。需要注意的是，不要和已经存在的控件ID或者其他已经生成的控件ID重复。</p>
<p><a href="https://developer.android.com/reference/android/app/ActivityManager.htmlclearApplicationUserData(" target="_blank" rel="external">ActivityManager.clearApplicationUserData()</a>)—— 一键清理你的app产生的用户数据，可能是做用户退出登录功能，有史以来最简单的方式了。</p>
<p><a href="http://developer.android.com/reference/android/content/Context.htmlcreateConfigurationContext(android.%E2%80%94%E2%80%94ontent.res.Configuration" target="_blank" rel="external">Context.createConfigurationContext()</a>) ——自定义你的配置环境信息。我通常会遇到这样的问题：强制让一部分显示在某个特定的环境下（倒不是我一直这样瞎整，说来话长，你很难理解）。用这个实现起来可以稍微简单一点。</p>
<p><a href="http://developer.android.com/reference/android/app/ActivityOptions.html" target="_blank" rel="external">ActivityOptions</a> ——方便的定义两个Activity切换的动画。 使用<a href="http://developer.android.com/reference/android/support/v4/app/ActivityOptionsCompat.html" target="_blank" rel="external">ActivityOptionsCompat</a> 可以很好解决旧版本的兼容问题。</p>
<p><a href="http://developer.android.com/reference/android/widget/AdapterViewFlipper.htmlfyiWillBeAdvancedByHostKThx%28%29" target="_blank" rel="external">AdapterViewFlipper.fyiWillBeAdvancedByHostKThx()</a>——仅仅因为很好玩，没有其他原因。在整个安卓开源项目中（AOSP the Android ——pen Source Project Android开放源代码项目）中还有其他很有意思的东西（比如 GRAVITY_DEATH_STAR_I）。不过，都不像这个这样，这个确实有用。<br>译者注：该API从V11才开始支持。</p>
<p><a href="http://developer.android.com/reference/android/view/ViewParent.htmlrequestDisallowInterceptTouchEvent%28boolean%29" target="_blank" rel="external">ViewParent.requestDisallowInterceptTouchEvent()</a> ——Android系统触摸事件机制大多时候能够默认处理，不过有时候你需要使用这个方法来剥夺父级控件的控制权（顺便说一下，如果你想对Android触摸机制了解更多，这个演讲会令你惊叹不已。）</p>
]]></content>
    <summary type="html"><![CDATA[<p>转至<a href="http://blog.danlew.net/2014/03/30/android-tips-round-up-part-1/" target="_blank" rel="external">http://blog.danlew.net/2014/03/30/android-tips-round-up-part-1/</a><br>]]></summary>
    
      <category term="Tips" scheme="http://seniorzhai.github.io/tags/Tips/"/>
    
      <category term="Android" scheme="http://seniorzhai.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AndroidStudio图标插件]]></title>
    <link href="http://seniorzhai.github.io/2015/02/28/AndroidStudio%E5%9B%BE%E6%A0%87%E6%8F%92%E4%BB%B6/"/>
    <id>http://seniorzhai.github.io/2015/02/28/AndroidStudio图标插件/</id>
    <published>2015-02-28T01:34:56.000Z</published>
    <updated>2015-02-28T01:38:46.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/konifar/android-material-design-icon-generator-plugin" target="_blank" rel="external">Android Material Design Icon Generator Plugin</a>是一款帮助我们设置Material风格图标的插件<br><a id="more"></a></p>
<h1 id="使用">使用</h1>
<p><img src="https://raw.githubusercontent.com/konifar/android-material-design-icon-generator-plugin/master/docs/capture.gif" alt=""></p>
<h1 id="安装">安装</h1>
<ol>
<li>下载<a href="https://github.com/konifar/android-material-design-icon-generator-plugin/raw/master/MaterialDesignIconGeneratorPlugin.jar" target="_blank" rel="external">MaterialDesignIconGeneratorPlugin.jar</a></li>
<li>在AS中选择<code>Preference &gt; Plugins &gt; Install plugin from disk...</code>安装既可</li>
</ol>
<p>也可以通过<code>Preference &gt; Plugins &gt; Browse repositories</code>在线安装<br><img src="https://raw.githubusercontent.com/konifar/android-material-design-icon-generator-plugin/master/docs/install.png" alt=""></p>
]]></content>
    <summary type="html"><![CDATA[<p><a href="https://github.com/konifar/android-material-design-icon-generator-plugin" target="_blank" rel="external">Android Material Design Icon Generator Plugin</a>是一款帮助我们设置Material风格图标的插件<br>]]></summary>
    
      <category term="AndroidStudio" scheme="http://seniorzhai.github.io/tags/AndroidStudio/"/>
    
      <category term="Material" scheme="http://seniorzhai.github.io/tags/Material/"/>
    
      <category term="icon" scheme="http://seniorzhai.github.io/tags/icon/"/>
    
      <category term="Android" scheme="http://seniorzhai.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[NanoTasks]]></title>
    <link href="http://seniorzhai.github.io/2015/02/27/NanoTasks/"/>
    <id>http://seniorzhai.github.io/2015/02/27/NanoTasks/</id>
    <published>2015-02-27T03:25:57.000Z</published>
    <updated>2015-03-12T09:39:15.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/fabiendevos/nanotasks" target="_blank" rel="external">NanoTasks</a>是一款轻量级的Android异步任务工具类，是<code>AsyncTask</code>的替代品。<br><a id="more"></a></p>
<h1 id="导入依赖">导入依赖</h1>
<figure class="highlight Gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.fabiendevos:nanotasks:1.0.0'</span></div></pre></td></tr></table></figure>

<h1 id="使用">使用</h1>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Tasks.executeInBackground(context, <span class="keyword">new</span> BackgroundWork&lt;Data&gt;() {</div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> Data <span class="title">doInBackground</span>() <span class="keyword">throws</span> Exception {</div><div class="line">        <span class="keyword">return</span> fetchData(); <span class="comment">// 费时操作</span></div><div class="line">    }</div><div class="line">}, <span class="keyword">new</span> Completion&lt;Data&gt;() {</div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span>(Context context, Data result) {</div><div class="line">        display(result);	<span class="comment">// 成功：显示结果</span></div><div class="line">    }</div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span>(Context context, Exception e) {</div><div class="line">        showError(e);		<span class="comment">// 失败：处理错误</span></div><div class="line">    }</div><div class="line">});</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<p><a href="https://github.com/fabiendevos/nanotasks" target="_blank" rel="external">NanoTasks</a>是一款轻量级的Android异步任务工具类，是<code>AsyncTask</code>的替代品。<br>]]></summary>
    
      <category term="异步" scheme="http://seniorzhai.github.io/tags/%E5%BC%82%E6%AD%A5/"/>
    
      <category term="Async" scheme="http://seniorzhai.github.io/tags/Async/"/>
    
      <category term="Android" scheme="http://seniorzhai.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Meteor初识]]></title>
    <link href="http://seniorzhai.github.io/2015/02/25/Meteor%E5%88%9D%E8%AF%86/"/>
    <id>http://seniorzhai.github.io/2015/02/25/Meteor初识/</id>
    <published>2015-02-25T08:36:35.000Z</published>
    <updated>2015-03-02T08:30:04.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://www.meteor.com/" target="_blank" rel="external">Meteor</a>是一个强大的Web APP框架，基础框架是<code>Node.JS</code>+<code>MongoDB</code><br><a id="more"></a></p>
<h1 id="基础">基础</h1>
<h2 id="下载安装">下载安装</h2>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl http<span class="variable">s:</span>//install.meteor.<span class="keyword">com</span> | /bin/<span class="keyword">sh</span></div></pre></td></tr></table></figure>

<h2 id="创建项目">创建项目</h2>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meteor <span class="built_in">create</span> <span class="keyword">try</span>-meteor</div></pre></td></tr></table></figure>

<h2 id="启动项目">启动项目</h2>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> <span class="keyword">try</span>-meteor</div><div class="line">meteor</div></pre></td></tr></table></figure>

<h2 id="配置开发移动端">配置开发移动端</h2>
<h3 id="安装移动端SDK">安装移动端SDK</h3>
<p>第一次需要安装SDK</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">meteor <span class="operator"><span class="keyword">install</span>-sdk android</span></div><div class="line">meteor <span class="keyword">install</span>-sdk ios</div></pre></td></tr></table></figure>

<ul>
<li>Anroid on Mac需要以下环境<ul>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">JDK</a></li>
<li><a href="https://android-bundle.s3.amazonaws.com/haxm/IntelHAXM_1.0.8.mpkg" target="_blank" rel="external">HAXM</a></li>
<li>Android SDK <code>meteor install-sdk android</code><h3 id="配置项目">配置项目</h3>
</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">meteor <span class="built_in">add</span>-<span class="built_in">platform</span> android</div><div class="line">meteor <span class="built_in">add</span>-<span class="built_in">platform</span> ios</div></pre></td></tr></table></figure>

<h3 id="模拟器运行">模拟器运行</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">meteor <span class="command">run</span> android</div><div class="line">meteor <span class="command">run</span> ios</div></pre></td></tr></table></figure>

<h3 id="设备上运行">设备上运行</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">meteor <span class="command">run</span> android-device</div><div class="line">meteor <span class="command">run</span> ios-device</div></pre></td></tr></table></figure>

<h1 id="Demo">Demo</h1>
<h2 id="创建项目-1">创建项目</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meteor <span class="operator"><span class="keyword">create</span> MeteorDemo</span></div></pre></td></tr></table></figure>

<h2 id="试运行">试运行</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> MeteorDemo</div><div class="line">meteor</div></pre></td></tr></table></figure>

<p>在浏览器中进入<code>localhost:3000</code><br><img src="/img/15030101.png" alt=""><br>    值得一提的是Meteor是热启动的，只要启动后，任何修改都是立即显示</p>
<h1 id="PS">PS</h1>
<p>Web技术栈</p>
<ul>
<li>LAMP<ul>
<li>L Linux</li>
<li>A Apache</li>
<li>M MySQL</li>
<li>P PHP</li>
</ul>
</li>
<li>MEAN<ul>
<li>M MongoDB</li>
<li>E Express.js</li>
<li>A Angular.js</li>
<li>N Node.js</li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<p><a href="https://www.meteor.com/" target="_blank" rel="external">Meteor</a>是一个强大的Web APP框架，基础框架是<code>Node.JS</code>+<code>MongoDB</code><br>]]></summary>
    
      <category term="node.js" scheme="http://seniorzhai.github.io/tags/node-js/"/>
    
      <category term="meteor" scheme="http://seniorzhai.github.io/tags/meteor/"/>
    
      <category term="web" scheme="http://seniorzhai.github.io/tags/web/"/>
    
      <category term="app" scheme="http://seniorzhai.github.io/tags/app/"/>
    
      <category term="node.js" scheme="http://seniorzhai.github.io/categories/node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JS中对象的处理]]></title>
    <link href="http://seniorzhai.github.io/2015/02/25/JS%E4%B8%AD%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%A4%84%E7%90%86/"/>
    <id>http://seniorzhai.github.io/2015/02/25/JS中对象的处理/</id>
    <published>2015-02-25T05:58:47.000Z</published>
    <updated>2015-02-25T06:09:00.000Z</updated>
    <content type="html"><![CDATA[<p><a id="more"></a></p>
<h2 id="单个对象">单个对象</h2>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = {</div><div class="line">	name: <span class="string">'Zoe'</span>,</div><div class="line">	describe: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">		<span class="keyword">return</span> <span class="string">'Person named '</span> + <span class="keyword">this</span>.name;</div><div class="line">	}</div><div class="line">};</div></pre></td></tr></table></figure>

<p>使用时</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">obj.name;	<span class="comment">// Zoe</span></div><div class="line">obj.name = <span class="string">'Zhai'</span>;	<span class="comment">// 赋值</span></div><div class="line">obj.age = <span class="number">22</span>;	<span class="comment">// 自动创建</span></div><div class="line">obj.describe();	<span class="comment">// Person named Zhai;</span></div></pre></td></tr></table></figure>

<p><code>in</code>操作符可以用来检测一个属性是否存在</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">'age'</span> <span class="keyword">in</span> obj;	<span class="comment">// true</span></div><div class="line"><span class="string">'foo'</span> <span class="keyword">in</span> obj;	<span class="comment">// false，不存在的属性为undefined值</span></div></pre></td></tr></table></figure>

<p><code>delete</code>操作符可以用来删除一个属性</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">delete</span> obj.age;</div><div class="line">obj.age;	<span class="comment">//undefined</span></div></pre></td></tr></table></figure>

<h2 id="构造函数">构造函数</h2>
<p>除了作为“真正”的函数和方法，函数还在JavaScript中扮演第三种角色：如果通过new操作符调用，他们会变为构造函数，对象的工厂。构造函数是对其他语言中的类的粗略模拟。约定俗成，构造函数的第一个字母大写。例如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置实例数据</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span><span class="params">(x, y)</span> </span>{</div><div class="line">    <span class="keyword">this</span>.x = x;</div><div class="line">    <span class="keyword">this</span>.y = y;</div><div class="line">}</div><div class="line"><span class="comment">// 方法</span></div><div class="line">Point.prototype.dist = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(<span class="keyword">this</span>.x*<span class="keyword">this</span>.x + <span class="keyword">this</span>.y*<span class="keyword">this</span>.y);</div><div class="line">};</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<p>]]></summary>
    
      <category term="对象" scheme="http://seniorzhai.github.io/tags/%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="继承" scheme="http://seniorzhai.github.io/tags/%E7%BB%A7%E6%89%BF/"/>
    
      <category term="node.js" scheme="http://seniorzhai.github.io/categories/node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[typeof和instanceof]]></title>
    <link href="http://seniorzhai.github.io/2015/02/25/typeof%E5%92%8Cinstanceof/"/>
    <id>http://seniorzhai.github.io/2015/02/25/typeof和instanceof/</id>
    <published>2015-02-25T05:51:49.000Z</published>
    <updated>2015-02-25T05:54:04.000Z</updated>
    <content type="html"><![CDATA[<p>typeof和instanceof都可以用来将值分类，typeof主要用于原始值，instanceof主要用于对象。<br><a id="more"></a></p>
<h2 id="typeof使用方法">typeof使用方法</h2>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> &lt;value&gt;</div></pre></td></tr></table></figure>

<p>typeof返回描述value’类型’的字符串</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="literal">true</span> 	<span class="comment">// 'boolean'</span></div><div class="line"><span class="keyword">typeof</span> <span class="string">'abc'</span>	<span class="comment">// 'string'</span></div><div class="line"><span class="keyword">typeof</span> {}		<span class="comment">// 'object'</span></div><div class="line"><span class="keyword">typeof</span> []		<span class="comment">// 'object'</span></div></pre></td></tr></table></figure>

<p>详情对应下表<br>|操作数|结果|<br>|:—-|:—-|<br>|undefined|’undefined’|<br>|null|’object’|<br>|Boolean value|’boolean’|<br>|Number value|’number’|<br>|String value|’string’|<br>|Function|’function’|<br>|All other value|’object’|</p>
<h2 id="instanceof">instanceof</h2>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">value <span class="keyword">instanceof</span> &lt;Constr&gt;</div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Bar();</div><div class="line">b <span class="keyword">instanceof</span> Bar;	<span class="comment">// true</span></div><div class="line">{} <span class="keyword">instanceof</span> <span class="built_in">Object</span>;	<span class="comment">// true</span></div><div class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Array</span>;	<span class="comment">// true</span></div><div class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Object</span>;	<span class="comment">// true</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<p>typeof和instanceof都可以用来将值分类，typeof主要用于原始值，instanceof主要用于对象。<br>]]></summary>
    
      <category term="js" scheme="http://seniorzhai.github.io/tags/js/"/>
    
      <category term="node.js" scheme="http://seniorzhai.github.io/categories/node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SelectorChapek插件]]></title>
    <link href="http://seniorzhai.github.io/2015/02/13/SelectorChapek%E6%8F%92%E4%BB%B6/"/>
    <id>http://seniorzhai.github.io/2015/02/13/SelectorChapek插件/</id>
    <published>2015-02-13T06:08:18.000Z</published>
    <updated>2015-03-01T09:48:55.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/inmite/android-selector-chapek" target="_blank" rel="external">SelectorChapek</a>是一款帮助我们快速完成Selector的AndroidStudio插件<br><a id="more"></a></p>
<h2 id="安装">安装</h2>
<ol>
<li>选择<code>Preferences→Plugins→Browse repositories</code>搜索<code>SelectorChapek</code>安装</li>
<li><a href="http://plugins.jetbrains.com/plugin/7298" target="_blank" rel="external">下载</a>并在<code>Preferences→Plugins→Install plugin from disk</code>选择安装</li>
</ol>
<h2 id="使用">使用</h2>
<ol>
<li>在资源文件夹上右击，如<code>drawable-xhdpi</code><br><img src="/img/15021302.png" alt=""></li>
<li>选择<code>Generate Android Selectors</code><br><img src="/img/15021303.png" alt=""></li>
<li>selectors文件会自动生成在<code>drawable</code>文件夹下<br><img src="/img/15021304.png" alt=""></li>
</ol>
<h2 id="命名规则">命名规则</h2>
<p>为了插件的正常运行，资源文件需要正确的命名，该插件支持<code>.png</code>和<code>.9.png</code>文件的识别</p>
<table>
<thead>
<tr>
<th style="text-align:left">文件后缀</th>
<th style="text-align:left">状态</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">_normal</td>
<td style="text-align:left">(default_state)</td>
</tr>
<tr>
<td style="text-align:left">_pressed</td>
<td style="text-align:left">state_pressed</td>
</tr>
<tr>
<td style="text-align:left">_focused</td>
<td style="text-align:left">state_focused</td>
</tr>
<tr>
<td style="text-align:left">_disabled</td>
<td style="text-align:left">state_enabled(false)</td>
</tr>
<tr>
<td style="text-align:left">_checked</td>
<td style="text-align:left">state_checked</td>
</tr>
<tr>
<td style="text-align:left">_selected</td>
<td style="text-align:left">state_selected</td>
</tr>
<tr>
<td style="text-align:left">_hovered</td>
<td style="text-align:left">state_hovered</td>
</tr>
<tr>
<td style="text-align:left">_checkable</td>
<td style="text-align:left">state_checkable</td>
</tr>
<tr>
<td style="text-align:left">_activated</td>
<td style="text-align:left">state_acticated</td>
</tr>
<tr>
<td style="text-align:left">_windowfocused</td>
<td style="text-align:left">state_window_focused</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html"><![CDATA[<p><a href="https://github.com/inmite/android-selector-chapek" target="_blank" rel="external">SelectorChapek</a>是一款帮助我们快速完成Selector的AndroidStudio插件<br>]]></summary>
    
      <category term="AndroidStudio" scheme="http://seniorzhai.github.io/tags/AndroidStudio/"/>
    
      <category term="Android" scheme="http://seniorzhai.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AndroidStudio调用so文件]]></title>
    <link href="http://seniorzhai.github.io/2015/02/13/AndroidStudio%E8%B0%83%E7%94%A8so%E6%96%87%E4%BB%B6/"/>
    <id>http://seniorzhai.github.io/2015/02/13/AndroidStudio调用so文件/</id>
    <published>2015-02-13T01:51:49.000Z</published>
    <updated>2015-02-13T06:07:55.000Z</updated>
    <content type="html"><![CDATA[<p><a id="more"></a></p>
<ol>
<li>将*.so文件拷贝到<code>app\libs\armeabi</code>文件夹下</li>
<li>修改<code>build.gradle</code>文件，在<code>buildTypes</code>下添加</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span>Sets {  </div><div class="line">        main {  </div><div class="line">            jniLibs.srcDirs = [<span class="string">'libs'</span>]  </div><div class="line">        }  </div><div class="line">    }</div></pre></td></tr></table></figure>

<ol>
<li>在调用处</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">native</span> String  <span class="title">stringFromJNI</span>();           <span class="comment">//jni 函数名  </span></div><div class="line"><span class="keyword">public</span> <span class="keyword">native</span> String  <span class="title">getFFmpegVersionFromJNI</span>(); <span class="comment">//jni函数名  </span></div><div class="line"><span class="keyword">static</span> {  </div><div class="line">    System.loadLibrary(<span class="string">"ffmpeg"</span>);                <span class="comment">//加载.so文件  </span></div><div class="line">    System.loadLibrary(<span class="string">"ffmpeg-jni"</span>);            <span class="comment">//加载.so文件  </span></div><div class="line">}</div></pre></td></tr></table></figure>

<hr>
<p>另一个方法<br>*.so文件导入android到<code>app/src/main/jniLibs</code>文件夹下<br><img src="/img/15021301.jpg" alt=""></p>
]]></content>
    <summary type="html"><![CDATA[<p>]]></summary>
    
      <category term="AndroidStudio" scheme="http://seniorzhai.github.io/tags/AndroidStudio/"/>
    
      <category term="so" scheme="http://seniorzhai.github.io/tags/so/"/>
    
      <category term="Android" scheme="http://seniorzhai.github.io/categories/Android/"/>
    
  </entry>
  
</feed>
